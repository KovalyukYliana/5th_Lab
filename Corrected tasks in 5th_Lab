

namespace Lab_5
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int c, maxColumn, minColumn, c1, l1, c2, l2;
            double min, max;
            double[,] array, boxx;
            
            #region 2 in 1
            Console.WriteLine("Task 2 level 1");

            Console.WriteLine("Write size of sides of first triangle");
            Double.TryParse(Console.ReadLine(), out double aa1);
            Double.TryParse(Console.ReadLine(), out double bb1);
            Double.TryParse(Console.ReadLine(), out double cc1);

            Console.WriteLine("Write size of sides of second triangle");
            Double.TryParse(Console.ReadLine(), out double aa2);
            Double.TryParse(Console.ReadLine(), out double bb2);
            Double.TryParse(Console.ReadLine(), out double cc2);

            if ((aa1 > 0) && (bb1 > 0) && (cc1 > 0) && (aa2 > 0) && (bb2 > 0) && (cc2 > 0))
            {
                double trg1 = TriangleSquare(aa1, bb1, cc1);
                double trg2 = TriangleSquare(aa2, bb2, cc2);
                if ((trg1 > 0) && (trg2 > 0)) { Console.WriteLine(Math.Max(trg1, trg2)); }
                else { Console.WriteLine(":("); }
            }

            Console.WriteLine();
            #endregion

            #region 10 in 2
            Console.WriteLine("Task 10 level 2");
            Console.WriteLine("Write height of array");
            if (Int32.TryParse(Console.ReadLine(), out c))
            {
                array = ReadArray(c, c);

                // Find max of lower triangle
                max = array[0, 0];
                maxColumn = 0;
                for (int i = 0; i < array.GetLength(0); i++)
                    for (int j = 0; j <= i; j++)
                        if (array[i, j] > max)
                        { max = array[i, j]; maxColumn = j; }

                // Find min of upper triangle
                min = array[0, 1];
                minColumn = 1;
                for (int i = 0; i < array.GetLength(0); i++)
                    for (int j = i + 1; j < array.GetLength(1); j++)
                        if (array[i, j] < min)
                        { min = array[i, j]; minColumn = j; }

                if (minColumn != maxColumn)
                {
                    array = DeleteColumn(array, Math.Min(minColumn, maxColumn));
                    array = DeleteColumn(array, (Math.Max(minColumn, maxColumn) - 1));
                }
                else if (minColumn == maxColumn) { array = DeleteColumn(array, minColumn); }

                WriteArr(array);
            }

            Console.WriteLine();
            #endregion

            #region 23 in 2
            Console.WriteLine("Task 23 level 2");

            //c1 = 3; l1 = 2; array = new double[,] { { -4, -4 }, { -6, -6 }, { -6, -4 } };
            //c1 = 3; l1 = 2; array = new double[,] { { 7, 8 }, { 6, 6 }, { 6, 6 } };

            Console.WriteLine("Write rows of first array");
            bool in1 = Int32.TryParse(Console.ReadLine(), out c1);
            Console.WriteLine("Write coloumns of first array");
            bool in2 = Int32.TryParse(Console.ReadLine(), out l1);

            if (in1 & in2)
            {
                array = ReadArray(c1, l1);

                Console.WriteLine("Write rows of second array");
                bool in3 = Int32.TryParse(Console.ReadLine(), out c2);
                Console.WriteLine("Write coloumns of second array");
                bool in4 = Int32.TryParse(Console.ReadLine(), out l2);

                if ((in3 & in4) && (c1*l2 > 5) && (c2*l2 > 5))
                {
                    boxx = ReadArray(c2, l2);

                    array = RecreateMatrix(array);
                    boxx = RecreateMatrix(boxx);

                    Console.WriteLine();
                    Console.WriteLine("Recreate first array");
                    WriteArr(array);
                    Console.WriteLine();
                    Console.WriteLine("Recreate second array");
                    WriteArr(boxx);
                }
                else { Console.WriteLine(":("); }
            }
            else { Console.WriteLine(":("); }

            Console.WriteLine();
            #endregion
        }

        static void WriteArr(double[,] a)
        {
            for (int i = 0; i < a.GetLength(0); i++)
            {
                for (int j = 0; j < a.GetLength(1); j++)
                { Console.Write(a[i, j] + " "); }
                Console.WriteLine();
            }
        }
        static double[,] ReadArray(int c, int l)
        {
            double[,] a = new double[c, l];
            for (int i = 0; i < c; i++)
                for (int j = 0; j < l; j++)
                {
                    Console.WriteLine("Write " + j + " element in line " + i);
                    if (Double.TryParse(Console.ReadLine(), out a[i, j])) { }
                    else { Console.WriteLine(":("); break; }
                }
            return a;
        }
        static double TriangleSquare(double a, double b, double c)
        {
            if ((a + b > c) && (a + c > b) && (b + c > a))
            {
                double p = (a + b + c) / 2;
                return Math.Pow(p * (p - a) * (p - b) * (p - c), 0.5);
            }
            else { return 0; }
        }
        static double[,] DeleteColumn(double[,] a, int index)
        {
            double[,] newa = new double[a.GetLength(0), (a.GetLength(1) - 1)];
            for (int i = 0; i < newa.GetLength(0); i++)
                for (int j = 0; j < newa.GetLength(1); j++)
                { newa[i, j] = a[i, j]; }
            for (int i = 0; i < newa.GetLength(0); i++)
                for (int j = index + 1; j < a.GetLength(1); j++)
                { newa[i, j - 1] = a[i, j]; }
            return newa;
        }
        static double[,] RecreateMatrix(double[,] a)
        {
            double[,] newa = new double[a.GetLength(0), a.GetLength(1)];
            double[] Max = new double[5];
            Find5max(a, out Max[0], out Max[1], out Max[2], out Max[3], out Max[4]);
            int f = 0; int ind = 0;

            for (int i = 0; i < a.GetLength(0); i++)
                for (int j = 0; j < a.GetLength(1); j++)
                {
                    if (ind < 5)
                    {
                        if ((a[i, j] == Max[ind]) && (f < 5) && (ind == f))
                        {  a[i, j] *= 2; f++; ind++;  }
                        else { a[i, j] = a[i, j] * 0.5; }
                    }
                    else { a[i, j] = a[i, j] * 0.5; }
                }

            return a;
        }
        static double[,] Sort(double[,] add)
        {
            int f = 1;
            int start = 0;
            int end = add.GetLength(1);
            double ad, ad2;

            while (f == 1)
            {
                f = 0;
                for (int i = start; i < end - 1; i++)
                {
                    if (add[0, i] < add[0, i + 1])
                    {
                        ad = add[0, i]; ad2 = add[1, i];
                        add[0, i] = add[0, i + 1]; add[1, i] = add[1, i + 1];
                        add[0, i + 1] = ad; add[1, i + 1] = ad2;
                        f = 1;
                    }
                }

                if (f == 0) { break; }
                f = 0;
                end--; ;

                for (int i = end - 1; i >= start; i--)
                {
                    if (add[0, i] < add[0, i + 1])
                    {
                        ad = add[0, i]; ad2 = add[1, i];
                        add[0, i] = add[0, i + 1]; add[1, i] = add[1, i + 1];
                        add[0, i + 1] = ad; add[1, i + 1] = ad2;
                        f = 1;
                    }
                }

                start++;
            }
            return add;
        }
        static double[,] Sort2(double[,] add)
        {
            int f = 1;
            int start = 0;
            int end = add.GetLength(1);
            double ad, ad2;

            while (f == 1)
            {
                f = 0;
                for (int i = start; i < end - 1; i++)
                {
                    if (add[1, i] > add[1, i + 1])
                    {
                        ad = add[1, i]; ad2 = add[0, i];
                        add[1, i] = add[1, i + 1]; add[0, i] = add[0, i + 1];
                        add[1, i + 1] = ad; add[0, i + 1] = ad2;
                        f = 1;
                    }
                }

                if (f == 0) { break; }
                f = 0;
                end--; ;

                for (int i = end - 1; i >= start; i--)
                {
                    if (add[1, i] > add[1, i + 1])
                    {
                        ad = add[1, i]; ad2 = add[0, i];
                        add[1, i] = add[1, i + 1]; add[0, i] = add[0, i + 1];
                        add[1, i + 1] = ad; add[0, i + 1] = ad2;
                        f = 1;
                    }
                }

                start++;
            }
            return add;
        }
        static void Find5max(double[,] a, out double max1, out double max2, out double max3, out double max4, out double max5)
        {
            int hh = a.GetLength(0) * a.GetLength(1);
            int cc = 0;
            double[,] add = new double[2, hh];
            for (int i = 0; i < a.GetLength(0); i++)
                for (int j = 0; j < a.GetLength(1); j++)
                {
                    add[0, cc] = a[i, j];
                    add[1, cc] = cc;
                    cc++;
                }

            add = Sort(add);

            double[,] Max = new double[2, 5];

            Max[0, 0] = add[0, 0]; Max[0, 1] = add[0, 1]; Max[0, 2] = add[0, 2]; Max[0, 3] = add[0, 3]; Max[0, 4] = add[0, 4];
            Max[1, 0] = add[1, 0]; Max[1, 1] = add[1, 1]; Max[1, 2] = add[1, 2]; Max[1, 3] = add[1, 3]; Max[1, 4] = add[1, 4];

            Max = Sort2(Max);

            max1 = Max[0, 0]; max2 = Max[0, 1]; max3 = Max[0, 2]; max4 = Max[0, 3]; max5 = Max[0, 4];

            Console.WriteLine();
        }
    }
}


